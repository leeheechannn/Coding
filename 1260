#-*- coding:utf-8 -*-
from collections import deque

def Make_table(Node_Num, Edge_Num, Edge):
    Node = Node_Num + 1
    Table = [[0 for _ in range(Node)] for _ in range(Node)]

    for i in range(Edge_Num):
        Table[Edge[i][0]][Edge[i][1]] = 1
        Table[Edge[i][1]][Edge[i][0]] = 1

    return Table

def BFS(Edge_Table, Start_Node, Node_Num):
    Linked_list = deque()
    Linked_list.append(Start_Node)
    Check_table = [0] * (Node_Num + 1)
    Check_node = Start_Node

    while Linked_list:
        Check_node = Linked_list.popleft()
        Check_table[Check_node] = 1
        print(f'{Check_node}', end='')
        for i in range(Node_Num+1):
            if Edge_Table[Check_node][i] and Check_table[Check_node]:
                Linked_list.append(i)
    print(f'')

def DFS(Edge_Table, Start_Node, Node_Num):
    Stack = []
    Stack.append(Start_Node)
    print(f'{Start_Node}', end='')
    Check_table = [0] * (Node_Num +1)
    Check_table[Start_Node] = 1
    Check_Node = Start_Node

    while Stack:
        for i in range(Node_Num+1):
            if Edge_Table[Check_Node][i] and Check_table[Check_Node]:
                print(f'{i}', end='')
                Stack.append(i)
                break
            Stack.pop()
    print(f'')

# 정점의 개수, 간선의 개수, 탐색을 시작할 정점의 번호
Node_Num, Edge_Num, Start_Node = map(int, input().split())

# 간선
Edge = [list(map(int, input().split())) for _ in range(Edge_Num)]

Edge_Table = Make_table(Node_Num, Edge_Num, Edge)

BFS(Edge_Table, Start_Node, Node_Num)
DFS(Edge_Table, Start_Node, Node_Num)


